// DO NOT EDIT! Code generated by openapi-generator
package http

import (
	"net/http"
	"strings"
)

type Route struct {
	Method  string
	Path    string
	Handler http.HandlerFunc
}

type Routes []Route

func (r Routes) Len() int {
    return len(r)
}

func (r Routes) Less(i, j int) bool {
    return r[i].Path < r[j].Path
}

func (r Routes) Swap(i, j int) {
    r[i], r[j] = r[j], r[i]
}


type AuthApiRouter interface { 
	Login(http.ResponseWriter, *http.Request)
}

func NewAuthApiRoutes(r AuthApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Post"),
			Path: "/v1/login",
			Handler: r.Login,
		},
	}
}


type CreditCardApiRouter interface { 
	AddCreditCard(http.ResponseWriter, *http.Request)
	DeleteCreditCard(http.ResponseWriter, *http.Request)
	GetCreditCards(http.ResponseWriter, *http.Request)
}

func NewCreditCardApiRoutes(r CreditCardApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Post"),
			Path: "/v1/credit-cards",
			Handler: r.AddCreditCard,
		},
		{
			Method: strings.ToUpper("Delete"),
			Path: "/v1/me/credit-cards/{creditCardId}",
			Handler: r.DeleteCreditCard,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/me/credit-cards",
			Handler: r.GetCreditCards,
		},
	}
}


type HealthCheckApiRouter interface { 
	GetHealthCheck(http.ResponseWriter, *http.Request)
}

func NewHealthCheckApiRoutes(r HealthCheckApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/health-check",
			Handler: r.GetHealthCheck,
		},
	}
}


type MeApiRouter interface { 
	DeleteMe(http.ResponseWriter, *http.Request)
	GetMe(http.ResponseWriter, *http.Request)
	UpdateMe(http.ResponseWriter, *http.Request)
}

func NewMeApiRoutes(r MeApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Delete"),
			Path: "/v1/me",
			Handler: r.DeleteMe,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/me",
			Handler: r.GetMe,
		},
		{
			Method: strings.ToUpper("Put"),
			Path: "/v1/me",
			Handler: r.UpdateMe,
		},
	}
}


type ReceiptApiRouter interface { 
	DownloadReceipt(http.ResponseWriter, *http.Request)
}

func NewReceiptApiRoutes(r ReceiptApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/me/receipt/download/{chartId}",
			Handler: r.DownloadReceipt,
		},
	}
}


type ReservationApiRouter interface { 
	CancelReservation(http.ResponseWriter, *http.Request)
	ContactArrival(http.ResponseWriter, *http.Request)
	GetReservation(http.ResponseWriter, *http.Request)
	GetReservations(http.ResponseWriter, *http.Request)
	PaymentReservation(http.ResponseWriter, *http.Request)
}

func NewReservationApiRoutes(r ReservationApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Put"),
			Path: "/v1/me/reservations/{reservationId}/cancel",
			Handler: r.CancelReservation,
		},
		{
			Method: strings.ToUpper("Put"),
			Path: "/v1/me/reservations/{reservationId}/arrival-contact",
			Handler: r.ContactArrival,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/me/reservations/{reservationId}",
			Handler: r.GetReservation,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/me/reservations",
			Handler: r.GetReservations,
		},
		{
			Method: strings.ToUpper("Post"),
			Path: "/v1/me/reservations/{reservationId}/payment",
			Handler: r.PaymentReservation,
		},
	}
}


type ShiftApiRouter interface { 
	GetOneWeekShift(http.ResponseWriter, *http.Request)
	GetShiftsForMonth(http.ResponseWriter, *http.Request)
}

func NewShiftApiRoutes(r ShiftApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/users/{userId}/shifts/one-week",
			Handler: r.GetOneWeekShift,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/users/{userId}/shifts/one-month",
			Handler: r.GetShiftsForMonth,
		},
	}
}


type UserApiRouter interface { 
	GetUser(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
}

func NewUserApiRoutes(r UserApiRouter) Routes {
	return Routes{ 
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/users/{userId}",
			Handler: r.GetUser,
		},
		{
			Method: strings.ToUpper("Get"),
			Path: "/v1/users",
			Handler: r.GetUsers,
		},
	}
}


